################ Creating a git repositiry and adding our project into that ################################

1. Create a git repository in github.com.

2. Go to the directory in the command prompt, where you want to publish in github.

cd/your_directory_name

3. Us the below command to initialise the local directory as git repository.

git init

4. Add all the files in the local directory to staging using the below command.

git add .

This command stages all teh files in the directory, ready for commit.

5. You can now commit the staged files using the below command. It is explanatory and helpful. The below command commits all the files present to the local git repository.

git commit -m 'my first commit'

6. Add remote repositry url

* Now, copy the remote repositry URL provided by github to you when you published your repositry on Github.

* Now we will add the copied URL for your GitHub repository as remote repository using the code below.

	git remote add origin https://github.com/sachinarya9/python_concepts.git

* This command makes our github repository as a remote, which helps us making push our local repository changes.

7. Push local repository to Github

* In the las step, use the below command to push the local repository to github. It will upload the file or project on github.

	git push origin master

* If you use -u in the command, it will remember your preferences for remote and branch and you can simply use the command git push next time.

git push -u origin master

###################################### Add a single file to git repository######################################

8. To add a single file to the git repository.

1. git add file_name.txt # this adds file to the staging area.

2. git commit -m "commited file_name.txt". # this commits the file to the local repository

3. if our origin(master branch) is declared then run below command

      git push origin master

this will add the new file to our Git repository.

Note - This document hs been referred from the site https://www.tutsmake.com/upload-project-files-on-github-using-command-line/.

Site to study - https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

##################################### Update a file in git repository#########################################

* We can check status of our local git repository with the below command.

	git status

* This command tells us whether changes were made to a file in our local directory or not, and these changes are staged or not, for example, suppose we have done changes in a file named git_commands.txt but didn't stage it(git add) neither commited it(git commit) then the output will be.

>> git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_commands.txt

no changes added to commit (use "git add" and/or "git commit -a")

>> git add git_commands.txt
>> git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   git_commands.txt

>> git commit -m 'commited the changes'
>> git status
On branch master
nothing to commit, working tree clean

* Therefore to update the cahnges done to a file in the GIT repository we will have to follow the same procedure as we do when we push a single file to the git repository, i.e stage the file(git add), then commit the file(git commit), then push the file to the master branch(git push origin master).

* Now, one important thing to note, if we change a file called git_commands.txt and staged it(git add), after stagging it, we again modified the file, then git statud command will show the following status.

>> git add git_commands.txt
>> git status 
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   git_commands.txt

did few modifications in git_commands.txt

>> git status

On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   git_commands.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_commands.txt

* The above example tells us that if we have staged a file, and after staging it, we again modified that file, then those modifications will not go to the stagged area and therefore file will appear under the section "changes not staged for commit" and to remove the file from this section and to get the latest modifications, we will have to stage the file again so that the latest modifications can also come to the stagged area. The above example also has a section called "Changes to be committed:" which shows that the second latest modificaiton of the file is stagged but is yet to be commited, while the other section "Chnages not staged for commit" specifies that the same file was modified again and its yet to be stagged and commited.
This shows that a single file_name can appear in both the sections i.e "Changes to be committed:" and "Changes not staged for commit:" if the file was staged and again it got modified.

Sites to study GIT from - 1. https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository